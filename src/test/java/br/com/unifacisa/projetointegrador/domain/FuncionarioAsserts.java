package br.com.unifacisa.projetointegrador.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FuncionarioAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionarioAllPropertiesEquals(Funcionario expected, Funcionario actual) {
        assertFuncionarioAutoGeneratedPropertiesEquals(expected, actual);
        assertFuncionarioAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionarioAllUpdatablePropertiesEquals(Funcionario expected, Funcionario actual) {
        assertFuncionarioUpdatableFieldsEquals(expected, actual);
        assertFuncionarioUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionarioAutoGeneratedPropertiesEquals(Funcionario expected, Funcionario actual) {
        assertThat(actual)
            .as("Verify Funcionario auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionarioUpdatableFieldsEquals(Funcionario expected, Funcionario actual) {
        assertThat(actual)
            .as("Verify Funcionario relevant properties")
            .satisfies(a -> assertThat(a.getNome()).as("check nome").isEqualTo(expected.getNome()))
            .satisfies(a -> assertThat(a.getCpf()).as("check cpf").isEqualTo(expected.getCpf()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getTelefone()).as("check telefone").isEqualTo(expected.getTelefone()))
            .satisfies(a -> assertThat(a.getCargo()).as("check cargo").isEqualTo(expected.getCargo()))
            .satisfies(a -> assertThat(a.getDataAdmissao()).as("check dataAdmissao").isEqualTo(expected.getDataAdmissao()))
            .satisfies(a -> assertThat(a.getDataDesligamento()).as("check dataDesligamento").isEqualTo(expected.getDataDesligamento()))
            .satisfies(a -> assertThat(a.getSalario()).as("check salario").isEqualTo(expected.getSalario()))
            .satisfies(a -> assertThat(a.getAtivo()).as("check ativo").isEqualTo(expected.getAtivo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuncionarioUpdatableRelationshipsEquals(Funcionario expected, Funcionario actual) {
        assertThat(actual)
            .as("Verify Funcionario relationships")
            .satisfies(a -> assertThat(a.getUsuario()).as("check usuario").isEqualTo(expected.getUsuario()));
    }
}
