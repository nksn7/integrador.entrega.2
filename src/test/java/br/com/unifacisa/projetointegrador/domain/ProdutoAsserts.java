package br.com.unifacisa.projetointegrador.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProdutoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProdutoAllPropertiesEquals(Produto expected, Produto actual) {
        assertProdutoAutoGeneratedPropertiesEquals(expected, actual);
        assertProdutoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProdutoAllUpdatablePropertiesEquals(Produto expected, Produto actual) {
        assertProdutoUpdatableFieldsEquals(expected, actual);
        assertProdutoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProdutoAutoGeneratedPropertiesEquals(Produto expected, Produto actual) {
        assertThat(actual)
            .as("Verify Produto auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProdutoUpdatableFieldsEquals(Produto expected, Produto actual) {
        assertThat(actual)
            .as("Verify Produto relevant properties")
            .satisfies(a -> assertThat(a.getNome()).as("check nome").isEqualTo(expected.getNome()))
            .satisfies(a -> assertThat(a.getDescricao()).as("check descricao").isEqualTo(expected.getDescricao()))
            .satisfies(a -> assertThat(a.getCodigoBarras()).as("check codigoBarras").isEqualTo(expected.getCodigoBarras()))
            .satisfies(a -> assertThat(a.getCategoria()).as("check categoria").isEqualTo(expected.getCategoria()))
            .satisfies(a -> assertThat(a.getCustoAquisicao()).as("check custoAquisicao").isEqualTo(expected.getCustoAquisicao()))
            .satisfies(a -> assertThat(a.getPrecoVenda()).as("check precoVenda").isEqualTo(expected.getPrecoVenda()))
            .satisfies(a -> assertThat(a.getQuantidadeEstoque()).as("check quantidadeEstoque").isEqualTo(expected.getQuantidadeEstoque()))
            .satisfies(a -> assertThat(a.getEstoqueMinimo()).as("check estoqueMinimo").isEqualTo(expected.getEstoqueMinimo()))
            .satisfies(a -> assertThat(a.getUnidadeMedida()).as("check unidadeMedida").isEqualTo(expected.getUnidadeMedida()))
            .satisfies(a -> assertThat(a.getDataCadastro()).as("check dataCadastro").isEqualTo(expected.getDataCadastro()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProdutoUpdatableRelationshipsEquals(Produto expected, Produto actual) {
        // empty method
    }
}
