package br.com.unifacisa.projetointegrador.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EnderecoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnderecoAllPropertiesEquals(Endereco expected, Endereco actual) {
        assertEnderecoAutoGeneratedPropertiesEquals(expected, actual);
        assertEnderecoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnderecoAllUpdatablePropertiesEquals(Endereco expected, Endereco actual) {
        assertEnderecoUpdatableFieldsEquals(expected, actual);
        assertEnderecoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnderecoAutoGeneratedPropertiesEquals(Endereco expected, Endereco actual) {
        assertThat(actual)
            .as("Verify Endereco auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnderecoUpdatableFieldsEquals(Endereco expected, Endereco actual) {
        assertThat(actual)
            .as("Verify Endereco relevant properties")
            .satisfies(a -> assertThat(a.getRua()).as("check rua").isEqualTo(expected.getRua()))
            .satisfies(a -> assertThat(a.getCidade()).as("check cidade").isEqualTo(expected.getCidade()))
            .satisfies(a -> assertThat(a.getEstado()).as("check estado").isEqualTo(expected.getEstado()))
            .satisfies(a -> assertThat(a.getCodigoPostal()).as("check codigoPostal").isEqualTo(expected.getCodigoPostal()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnderecoUpdatableRelationshipsEquals(Endereco expected, Endereco actual) {
        assertThat(actual)
            .as("Verify Endereco relationships")
            .satisfies(a -> assertThat(a.getCliente()).as("check cliente").isEqualTo(expected.getCliente()))
            .satisfies(a -> assertThat(a.getFornecedor()).as("check fornecedor").isEqualTo(expected.getFornecedor()));
    }
}
