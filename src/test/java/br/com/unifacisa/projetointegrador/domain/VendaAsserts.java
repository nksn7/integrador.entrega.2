package br.com.unifacisa.projetointegrador.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VendaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVendaAllPropertiesEquals(Venda expected, Venda actual) {
        assertVendaAutoGeneratedPropertiesEquals(expected, actual);
        assertVendaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVendaAllUpdatablePropertiesEquals(Venda expected, Venda actual) {
        assertVendaUpdatableFieldsEquals(expected, actual);
        assertVendaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVendaAutoGeneratedPropertiesEquals(Venda expected, Venda actual) {
        assertThat(actual)
            .as("Verify Venda auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVendaUpdatableFieldsEquals(Venda expected, Venda actual) {
        assertThat(actual)
            .as("Verify Venda relevant properties")
            .satisfies(a -> assertThat(a.getDataVenda()).as("check dataVenda").isEqualTo(expected.getDataVenda()))
            .satisfies(a -> assertThat(a.getValorTotal()).as("check valorTotal").isEqualTo(expected.getValorTotal()))
            .satisfies(a -> assertThat(a.getDescontoTotal()).as("check descontoTotal").isEqualTo(expected.getDescontoTotal()))
            .satisfies(a -> assertThat(a.getFormaPagamento()).as("check formaPagamento").isEqualTo(expected.getFormaPagamento()))
            .satisfies(a -> assertThat(a.getParcelas()).as("check parcelas").isEqualTo(expected.getParcelas()))
            .satisfies(a -> assertThat(a.getNotaFiscalEmitida()).as("check notaFiscalEmitida").isEqualTo(expected.getNotaFiscalEmitida()))
            .satisfies(a -> assertThat(a.getEstatus()).as("check estatus").isEqualTo(expected.getEstatus()))
            .satisfies(a -> assertThat(a.getObservacoes()).as("check observacoes").isEqualTo(expected.getObservacoes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVendaUpdatableRelationshipsEquals(Venda expected, Venda actual) {
        assertThat(actual)
            .as("Verify Venda relationships")
            .satisfies(a -> assertThat(a.getCliente()).as("check cliente").isEqualTo(expected.getCliente()))
            .satisfies(a -> assertThat(a.getFuncionario()).as("check funcionario").isEqualTo(expected.getFuncionario()));
    }
}
