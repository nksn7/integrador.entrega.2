package br.com.unifacisa.projetointegrador.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FornecedorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFornecedorAllPropertiesEquals(Fornecedor expected, Fornecedor actual) {
        assertFornecedorAutoGeneratedPropertiesEquals(expected, actual);
        assertFornecedorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFornecedorAllUpdatablePropertiesEquals(Fornecedor expected, Fornecedor actual) {
        assertFornecedorUpdatableFieldsEquals(expected, actual);
        assertFornecedorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFornecedorAutoGeneratedPropertiesEquals(Fornecedor expected, Fornecedor actual) {
        assertThat(actual)
            .as("Verify Fornecedor auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFornecedorUpdatableFieldsEquals(Fornecedor expected, Fornecedor actual) {
        assertThat(actual)
            .as("Verify Fornecedor relevant properties")
            .satisfies(a -> assertThat(a.getNome()).as("check nome").isEqualTo(expected.getNome()))
            .satisfies(a -> assertThat(a.getRazaoSocial()).as("check razaoSocial").isEqualTo(expected.getRazaoSocial()))
            .satisfies(a -> assertThat(a.getCpf()).as("check cpf").isEqualTo(expected.getCpf()))
            .satisfies(a -> assertThat(a.getCnpj()).as("check cnpj").isEqualTo(expected.getCnpj()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getTelefone()).as("check telefone").isEqualTo(expected.getTelefone()))
            .satisfies(a -> assertThat(a.getCondicaoPagamento()).as("check condicaoPagamento").isEqualTo(expected.getCondicaoPagamento()))
            .satisfies(a -> assertThat(a.getAtivo()).as("check ativo").isEqualTo(expected.getAtivo()))
            .satisfies(a -> assertThat(a.getDataCadastro()).as("check dataCadastro").isEqualTo(expected.getDataCadastro()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFornecedorUpdatableRelationshipsEquals(Fornecedor expected, Fornecedor actual) {
        // empty method
    }
}
